# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import review_pb2 as review__pb2


class ReviewServiceStub(object):
    """Review service for gRPC communication
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateReview = channel.unary_unary(
                '/review.ReviewService/CreateReview',
                request_serializer=review__pb2.CreateReviewRequest.SerializeToString,
                response_deserializer=review__pb2.CreateReviewResponse.FromString,
                )
        self.GetProductReviews = channel.unary_unary(
                '/review.ReviewService/GetProductReviews',
                request_serializer=review__pb2.GetProductReviewsRequest.SerializeToString,
                response_deserializer=review__pb2.GetProductReviewsResponse.FromString,
                )
        self.GetUserReviews = channel.unary_unary(
                '/review.ReviewService/GetUserReviews',
                request_serializer=review__pb2.GetUserReviewsRequest.SerializeToString,
                response_deserializer=review__pb2.GetUserReviewsResponse.FromString,
                )
        self.GetReview = channel.unary_unary(
                '/review.ReviewService/GetReview',
                request_serializer=review__pb2.GetReviewRequest.SerializeToString,
                response_deserializer=review__pb2.GetReviewResponse.FromString,
                )
        self.UpdateReview = channel.unary_unary(
                '/review.ReviewService/UpdateReview',
                request_serializer=review__pb2.UpdateReviewRequest.SerializeToString,
                response_deserializer=review__pb2.UpdateReviewResponse.FromString,
                )
        self.DeleteReview = channel.unary_unary(
                '/review.ReviewService/DeleteReview',
                request_serializer=review__pb2.DeleteReviewRequest.SerializeToString,
                response_deserializer=review__pb2.DeleteReviewResponse.FromString,
                )
        self.GetProductReviewSummary = channel.unary_unary(
                '/review.ReviewService/GetProductReviewSummary',
                request_serializer=review__pb2.GetProductReviewSummaryRequest.SerializeToString,
                response_deserializer=review__pb2.ProductReviewSummary.FromString,
                )
        self.Check = channel.unary_unary(
                '/review.ReviewService/Check',
                request_serializer=review__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=review__pb2.HealthCheckResponse.FromString,
                )


class ReviewServiceServicer(object):
    """Review service for gRPC communication
    """

    def CreateReview(self, request, context):
        """Create a new review
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProductReviews(self, request, context):
        """Get reviews for a product (used by ProductCatalog service)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserReviews(self, request, context):
        """Get reviews by a user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetReview(self, request, context):
        """Get a specific review by ID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateReview(self, request, context):
        """Update an existing review
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteReview(self, request, context):
        """Delete a review
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProductReviewSummary(self, request, context):
        """Get review summary for a product (used by ProductCatalog service)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Check(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReviewServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateReview': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateReview,
                    request_deserializer=review__pb2.CreateReviewRequest.FromString,
                    response_serializer=review__pb2.CreateReviewResponse.SerializeToString,
            ),
            'GetProductReviews': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProductReviews,
                    request_deserializer=review__pb2.GetProductReviewsRequest.FromString,
                    response_serializer=review__pb2.GetProductReviewsResponse.SerializeToString,
            ),
            'GetUserReviews': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserReviews,
                    request_deserializer=review__pb2.GetUserReviewsRequest.FromString,
                    response_serializer=review__pb2.GetUserReviewsResponse.SerializeToString,
            ),
            'GetReview': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReview,
                    request_deserializer=review__pb2.GetReviewRequest.FromString,
                    response_serializer=review__pb2.GetReviewResponse.SerializeToString,
            ),
            'UpdateReview': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateReview,
                    request_deserializer=review__pb2.UpdateReviewRequest.FromString,
                    response_serializer=review__pb2.UpdateReviewResponse.SerializeToString,
            ),
            'DeleteReview': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteReview,
                    request_deserializer=review__pb2.DeleteReviewRequest.FromString,
                    response_serializer=review__pb2.DeleteReviewResponse.SerializeToString,
            ),
            'GetProductReviewSummary': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProductReviewSummary,
                    request_deserializer=review__pb2.GetProductReviewSummaryRequest.FromString,
                    response_serializer=review__pb2.ProductReviewSummary.SerializeToString,
            ),
            'Check': grpc.unary_unary_rpc_method_handler(
                    servicer.Check,
                    request_deserializer=review__pb2.HealthCheckRequest.FromString,
                    response_serializer=review__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'review.ReviewService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReviewService(object):
    """Review service for gRPC communication
    """

    @staticmethod
    def CreateReview(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/review.ReviewService/CreateReview',
            review__pb2.CreateReviewRequest.SerializeToString,
            review__pb2.CreateReviewResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProductReviews(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/review.ReviewService/GetProductReviews',
            review__pb2.GetProductReviewsRequest.SerializeToString,
            review__pb2.GetProductReviewsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUserReviews(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/review.ReviewService/GetUserReviews',
            review__pb2.GetUserReviewsRequest.SerializeToString,
            review__pb2.GetUserReviewsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetReview(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/review.ReviewService/GetReview',
            review__pb2.GetReviewRequest.SerializeToString,
            review__pb2.GetReviewResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateReview(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/review.ReviewService/UpdateReview',
            review__pb2.UpdateReviewRequest.SerializeToString,
            review__pb2.UpdateReviewResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteReview(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/review.ReviewService/DeleteReview',
            review__pb2.DeleteReviewRequest.SerializeToString,
            review__pb2.DeleteReviewResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProductReviewSummary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/review.ReviewService/GetProductReviewSummary',
            review__pb2.GetProductReviewSummaryRequest.SerializeToString,
            review__pb2.ProductReviewSummary.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Check(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/review.ReviewService/Check',
            review__pb2.HealthCheckRequest.SerializeToString,
            review__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
